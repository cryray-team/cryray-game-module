#include "common.h"
#include "mblur.h"
#include "dof.h"

Texture2D 			s_distort;
#define	EPSDEPTH	0.001
// Pixel

struct c2_out
{
	float4	Color : SV_Target;
};

c2_out main( v2p_aa_AA I ) : SV_Target
{
	c2_out	res;
	res.Color = float4(0,0,0,0);

	int iSample = 0;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, I.HPos, iSample );
#else
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, iSample );
#endif
	
#ifdef 	USE_DISTORT
  	//float 	depth 	= gbd.P.z;
	float4 	distort	= s_distort.Sample(smp_nofilter, I.Tex0);
	float2	offset	= (distort.xy-(127.0h/255.0h))*def_distort;  // fix newtral offset
	float2	center	= I.Tex0 + offset;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, I.HPos, iSample );
#else
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, iSample);
#endif

	//float 	depth_x	= gbdx.P.z;
	//if ((depth_x+EPSDEPTH)<depth)	center	= I.Tex0;	// discard new sample
#else // USE_DISTORT
	float2	center 	= I.Tex0;
#endif

	float3	img	= s_image.Load(int3(center.xy * screen_res.xy, 0), 0).xyz;//= //dof(center);
	
	//float4 	bloom	= s_bloom.Sample( smp_rtlinear, center);
	
//			img 	= mblur		(center,tex2D(s_position,I.tc0),img.rgb);
//			img 	= mblur( center, s_position.Sample( smp_nofilter, tc0), img.rgb);
			img 	= mblur( center, ( gbd ).P, img.rgb);

//#ifdef 	USE_DISTORT
// 	float3	blurred	= bloom*def_hdr	;
//			img		= lerp	(img,blurred,distort.z);
//#endif
	
// 	res.Color += combine_bloom( img, bloom );

	res.Color = img.xyzz;
	
	res.Color.rgb = pp_vibrance(res.Color.rgb, hemisphere_depth.x + 1.f);
	
	return res;
}
